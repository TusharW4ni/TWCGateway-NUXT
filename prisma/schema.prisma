generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                        @id @default(autoincrement())
  email                    String                     @unique
  firstName                String
  lastName                 String
  role                     String
  OnboardingEmployee       OnboardingEmployee?
  archived                 Boolean                    @default(false)
  SupervisorTaskAssignment SupervisorTaskAssignment[]

  @@map("user")
}

model OnboardingEmployee {
  id             Int                  @id @default(autoincrement())
  User           User                 @relation(fields: [userId], references: [id])
  userId         Int                  @unique
  Department     Department           @relation(fields: [departmentId], references: [id])
  departmentId   Int
  TaskAssignment OnEmTaskAssignment[]
  archived       Boolean              @default(false)

  @@map("onboardingEmployee")
}

model Department {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  Tasks               Task[]
  // Location            Location?            @relation(fields: [locationId], references: [id])
  locationId          Int?
  OnboardingEmployees OnboardingEmployee[]
  archived            Boolean              @default(false)

  @@map("department")
}

// model Location {
//   id          Int          @id @default(autoincrement())
//   name        String       @unique
//   Departments Department[]
//   archived    Boolean      @default(false)

//   @@map("location")
// }

model Task {
  id                         Int                       @id @default(autoincrement())
  description                String
  Department                 Department                @relation(fields: [departmentId], references: [id])
  departmentId               Int
  OnEmTaskAssignment         OnEmTaskAssignment[]
  SupervisorTaskAssignment   SupervisorTaskAssignment? @relation(fields: [supervisorTaskAssignmentId], references: [id])
  supervisorTaskAssignmentId Int?
  archived                   Boolean                   @default(false)

  @@map("task")
}

model OnEmTaskAssignment {
  id                   Int                @id @default(autoincrement())
  Task                 Task               @relation(fields: [taskId], references: [id])
  taskId               Int
  OnboardingEmployee   OnboardingEmployee @relation(fields: [onboardingEmployeeId], references: [id])
  onboardingEmployeeId Int
  completed            Boolean            @default(false)
  completedOn          DateTime?
  archived             Boolean            @default(false)

  @@map("onEmTaskAssignment")
}

model SupervisorTaskAssignment {
  id         Int     @id @default(autoincrement())
  Tasks      Task[]
  // taskId     Int
  Supervisor User    @relation(fields: [userId], references: [id])
  userId     Int
  archived   Boolean @default(false)

  @@map("supervisorTaskAssigment")
}
